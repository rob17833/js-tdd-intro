***TDD Introduction***

What the heck is TDD? >>> Test Driven Development !

Développement piloté par les tests) est une méthodologie de développement logiciel, visant à améliorer la qualité et la robustesse du code produit.

TDD can be used for all programing languages !

***But how does it work?***
Before writing code we first write the test.
This approach already makes it possible to ask questions!
	what am I looking to do?
	what the code is supposed to do?
	how is this code called?
In this way, writing a test allows to document the code
After having written the test, we write the minimal code allowing to pass the test
Having written the test first encourages writing only the code strictly necessary to meet the initial need.

Une fois que le code permet de faire passer le test, on peut :
•

Le refactorer, c'est-à-dire changer son fonctionnement interne, sans changer la façon dont il est appelé ni le résultat qu'il renvoie. Le refactoring peut viser l'amélioration de la structure du code et/ou de ses performances. Si le test passe toujours après refactoring, c'est que celui-ci a été bien fait.
•

Réfléchir à une fonctionnalité supplémentaire : on va alors écrire un nouveau test, puis implémenter la fonctionnalité. Il est nécessaire que le nouveau test et le précédent passent après l'implémentation. Si le nouveau test passe, mais plus l'ancien, il s'agit d'une régression : on a "cassé" la fonctionnalité précédente en implémentant la nouvelle.

Les assertions peuvent être utilisées dans d'autres contextes que pour les tests, mais sont à la base de ces derniers : un test consiste essentiellement à écrire des assertions, qui vérifient que le code testé est conforme aux attentes.

Assertion example:
	const assert = require('assert');
	assert.equal(Math.max(1, 5, 9), 9);
	the first argument is the result we get, the second argument is the result expected
	If these two values are different assert() will provide a value error however
	it doesn't controle the type
	If you want to controle the type as well you must use assert.strictEqual()

	another useful feature of assert() is assert.notEqual() which will return an
	error if the two values ARE EQUALS !

	example:
	assert.strictEqual(typeof concatStr, 'function', 'Should be a function');
	assert.strictEqual(concatStr.length, 2, 'Should takes 2 arguments');
	assert.strictEqual(concatStr('a', 'b'), 'ab');

There's several test runners (test frameworks) available:
	Jasmine
	Mocha
	Jest
They're all delivered by default with  Create React App ...

Let's go ahead:
IN ORDER TO STAY ORGANIZED, IT'S A GOOD PRACTICE NOT TO MIX THE ASSERTIONS(TEST) AND
THE CODE TO BE TESTED ITSELF !

So let's create a folder 'test' and a new file with the name of the fonction to be tested like capitalizeFirstLetters.test.js (extension for Mocha and Jest)

cut the test code (assertions) from the file that contains the function and pass it
into the new file we'have just created

at the end of the function file add module.exports = the name of the function

in the new file add a new line to retrieve the function to be tested by defining
a new variable with the name of the function which has : required(the relative path of the function file).

ok now it's better organized...

now just create a package JSON by using npm init --yes at the root of the main folder
then install mocha by typing >>
npm install --save-dev mocha at the root of the main folder

now we need to customize our package.json >>> and replace the key test value by 'mocha'
so we'll be able to launch the test by using this command: npm test(the key!)



